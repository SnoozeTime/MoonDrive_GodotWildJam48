[gd_scene load_steps=30 format=2]

[ext_resource path="res://Nodes/Game.gd" type="Script" id=1]
[ext_resource path="res://assets/Background/sky.png" type="Texture" id=2]
[ext_resource path="res://assets/Background/hills_front2.png" type="Texture" id=3]
[ext_resource path="res://Nodes/gui/GameOverScreen.tscn" type="PackedScene" id=4]
[ext_resource path="res://assets/Background/player_straight.png" type="Texture" id=5]
[ext_resource path="res://Nodes/Player.gd" type="Script" id=6]
[ext_resource path="res://Nodes/Background.gd" type="Script" id=7]
[ext_resource path="res://assets/Background/billboard02.png" type="Texture" id=8]
[ext_resource path="res://Nodes/TextureManager.gd" type="Script" id=9]
[ext_resource path="res://assets/Background/hills_back.png" type="Texture" id=10]
[ext_resource path="res://assets/Background/moon.png" type="Texture" id=11]
[ext_resource path="res://Fonts/BigFont.tres" type="DynamicFont" id=12]
[ext_resource path="res://Fonts/SmallFont.tres" type="DynamicFont" id=13]
[ext_resource path="res://Nodes/HUD.gd" type="Script" id=14]
[ext_resource path="res://Nodes/core/Road.gd" type="Script" id=15]
[ext_resource path="res://assets/Audio/SFX/car_engine_basef.ogg" type="AudioStream" id=16]
[ext_resource path="res://assets/Audio/SFX/drift.ogg" type="AudioStream" id=17]
[ext_resource path="res://assets/Background/sea.png" type="Texture" id=18]
[ext_resource path="res://Nodes/gui/timer_counter.tscn" type="PackedScene" id=19]
[ext_resource path="res://Nodes/gui/WinScreen.tscn" type="PackedScene" id=20]
[ext_resource path="res://Nodes/gui/kilometers_counter.tscn" type="PackedScene" id=21]
[ext_resource path="res://Nodes/gui/PauseScene.tscn" type="PackedScene" id=22]
[ext_resource path="res://assets/Audio/SFX/1.ogg" type="AudioStream" id=23]
[ext_resource path="res://assets/Audio/SFX/go.ogg" type="AudioStream" id=24]
[ext_resource path="res://assets/Audio/SFX/2.ogg" type="AudioStream" id=25]
[ext_resource path="res://assets/Audio/SFX/3.ogg" type="AudioStream" id=26]

[sub_resource type="Environment" id=1]
background_mode = 4
glow_enabled = true
glow_intensity = 0.42
glow_strength = 0.89
glow_blend_mode = 1
glow_hdr_threshold = 1.5

[sub_resource type="Shader" id=2]
code = "/*
Shader from Godot Shaders - the free shader library.
godotshaders.com/shader/VHS-and-CRT-monitor-effect

This shader is under CC0 license. Feel free to use, improve and 
change this shader according to your needs and consider sharing 
the modified result to godotshaders.com.
*/

shader_type canvas_item;

//*** IMPORTANT! ***/ 
// - If you are using this shader to affect the node it is applied to set 'overlay' to false (unchecked in the instepctor).
// - If you are using this shader as an overlay, and want the shader to affect the nodes below in the Scene hierarchy,
//   set 'overlay' to true (checked in the inspector).
// On Mac there is potentially a bug causing this to not work properly. If that is the case and you want to use the shader as an overlay
// change all \"overlay ? SCREEN_TEXTURE : TEXTURE\" to only \"SCREEN_TEXTURE\" on lines 129-140, and \"vec2 uv = overlay ? warp(SCREEN_UV) : warp(UV);\"
// to \"vec2 uv = warp(SCREEN_UV);\" on line 98.
uniform bool overlay = false;

uniform float scanlines_opacity : hint_range(0.0, 1.0) = 0.4;
uniform float scanlines_width : hint_range(0.0, 0.5) = 0.25;
uniform float grille_opacity : hint_range(0.0, 1.0) = 0.3;
uniform vec2 resolution = vec2(640.0, 480.0); // Set the number of rows and columns the texture will be divided in. Scanlines and grille will make a square based on these values

uniform bool pixelate = true; // Fill each square (\"pixel\") with a sampled color, creating a pixel look and a more accurate representation of how a CRT monitor would work.

uniform bool roll = true;
uniform float roll_speed = 8.0; // Positive values are down, negative are up
uniform float roll_size : hint_range(0.0, 100.0) = 15.0;
uniform float roll_variation : hint_range(0.1, 5.0) = 1.8; // This valie is not an exact science. You have to play around with the value to find a look you like. How this works is explained in the code below.
uniform float distort_intensity : hint_range(0.0, 0.2) = 0.05; // The distortion created by the rolling effect.

uniform float noise_opacity : hint_range(0.0, 1.0) = 0.4;
uniform float noise_speed = 5.0; // There is a movement in the noise pattern that can be hard to see first. This sets the speed of that movement.

uniform float static_noise_intensity : hint_range(0.0, 1.0) = 0.06;

uniform float aberration : hint_range(-1.0, 1.0) = 0.03; // Chromatic aberration, a distortion on each color channel.
uniform float brightness = 1.4; // When adding scanline gaps and grille the image can get very dark. Brightness tries to compensate for that.
uniform bool discolor = true; // Add a discolor effect simulating a VHS

uniform float warp_amount :hint_range(0.0, 5.0) = 1.0; // Warp the texture edges simulating the curved glass of a CRT monitor or old TV.
uniform bool clip_warp = false;

uniform float vignette_intensity = 0.4; // Size of the vignette, how far towards the middle it should go.
uniform float vignette_opacity : hint_range(0.0, 1.0) = 0.5;

// Used by the noise functin to generate a pseudo random value between 0.0 and 1.0
vec2 random(vec2 uv){
    uv = vec2( dot(uv, vec2(127.1,311.7) ),
               dot(uv, vec2(269.5,183.3) ) );
    return -1.0 + 2.0 * fract(sin(uv) * 43758.5453123);
}

// Generate a Perlin noise used by the distortion effects
float noise(vec2 uv) {
    vec2 uv_index = floor(uv);
    vec2 uv_fract = fract(uv);

    vec2 blur = smoothstep(0.0, 1.0, uv_fract);

    return mix( mix( dot( random(uv_index + vec2(0.0,0.0) ), uv_fract - vec2(0.0,0.0) ),
                     dot( random(uv_index + vec2(1.0,0.0) ), uv_fract - vec2(1.0,0.0) ), blur.x),
                mix( dot( random(uv_index + vec2(0.0,1.0) ), uv_fract - vec2(0.0,1.0) ),
                     dot( random(uv_index + vec2(1.0,1.0) ), uv_fract - vec2(1.0,1.0) ), blur.x), blur.y) * 0.5 + 0.5;
}

// Takes in the UV and warps the edges, creating the spherized effect
vec2 warp(vec2 uv){
	vec2 delta = uv - 0.5;
	float delta2 = dot(delta.xy, delta.xy);
	float delta4 = delta2 * delta2;
	float delta_offset = delta4 * warp_amount;
	
	return uv + delta * delta_offset;
}

// Adds a black border to hide stretched pixel created by the warp effect
float border (vec2 uv){
	float radius = min(warp_amount, 0.08);
	radius = max(min(min(abs(radius * 2.0), abs(1.0)), abs(1.0)), 1e-5);
	vec2 abs_uv = abs(uv * 2.0 - 1.0) - vec2(1.0, 1.0) + radius;
	float dist = length(max(vec2(0.0), abs_uv)) / radius;
	float square = smoothstep(0.96, 1.0, dist);
	return clamp(1.0 - square, 0.0, 1.0);
}

// Adds a vignette shadow to the edges of the image
float vignette(vec2 uv){
	uv *= 1.0 - uv.xy;
	float vignette = uv.x * uv.y * 15.0;
	return pow(vignette, vignette_intensity * vignette_opacity);
}

void fragment()
{
	vec2 uv = overlay ? warp(SCREEN_UV) : warp(UV); // Warp the uv. uv will be used in most cases instead of UV to keep the warping
	vec2 text_uv = uv;
	vec2 roll_uv = vec2(0.0);
	float time = roll ? TIME : 0.0;
	

	// Pixelate the texture based on the given resolution.
	if (pixelate)
	{
		text_uv = ceil(uv * resolution) / resolution;
	}
	
	// Create the rolling effect. We need roll_line a bit later to make the noise effect.
	// That is why this runs if roll is true OR noise_opacity is over 0.
	float roll_line = 0.0;
	if (roll || noise_opacity > 0.0)
	{
		// Create the areas/lines where the texture will be distorted.
		roll_line = smoothstep(0.3, 0.9, sin(uv.y * roll_size - (time * roll_speed) ) );
		// Create more lines of a different size and apply to the first set of lines. This creates a bit of variation.
		roll_line *= roll_line * smoothstep(0.3, 0.9, sin(uv.y * roll_size * roll_variation - (time * roll_speed * roll_variation) ) );
		// Distort the UV where where the lines are
		roll_uv = vec2(( roll_line * distort_intensity * (1.-UV.x)), 0.0);
	}
	
	vec4 text;
	if (roll)
	{
		// If roll is true distort the texture with roll_uv. The texture is split up into RGB to 
		// make some chromatic aberration. We apply the aberration to the red and green channels accorging to the aberration parameter
		// and intensify it a bit in the roll distortion.
		text.r = texture(SCREEN_TEXTURE, text_uv + roll_uv * 0.8 + vec2(aberration, 0.0) * .1).r;
		text.g = texture(SCREEN_TEXTURE, text_uv + roll_uv * 1.2 - vec2(aberration, 0.0) * .1 ).g;
		text.b = texture(SCREEN_TEXTURE, text_uv + roll_uv).b;
		text.a = 1.0;
	}
	else
	{
		// If roll is false only apply the aberration without any distorion. The aberration values are very small so the .1 is only 
		// to make the slider in the Inspector less sensitive.
		text.r = texture(SCREEN_TEXTURE, text_uv + vec2(aberration, 0.0) * .1).r;
		text.g = texture(SCREEN_TEXTURE, text_uv - vec2(aberration, 0.0) * .1).g;
		text.b = texture(SCREEN_TEXTURE, text_uv).b;
		text.a = 1.0;
	}
	
	float r = text.r;
	float g = text.g;
	float b = text.b;
	
	uv = warp(UV);
	
	// CRT monitors don't have pixels but groups of red, green and blue dots or lines, called grille. We isolate the texture's color channels 
	// and divide it up in 3 offsetted lines to show the red, green and blue colors next to each other, with a small black gap between.
	if (grille_opacity > 0.0){
		
		float g_r = smoothstep(0.85, 0.95, abs(sin(uv.x * (resolution.x * 3.14159265))));
		r = mix(r, r * g_r, grille_opacity);
		
		float g_g = smoothstep(0.85, 0.95, abs(sin(1.05 + uv.x * (resolution.x * 3.14159265))));
		g = mix(g, g * g_g, grille_opacity);
		
		float b_b = smoothstep(0.85, 0.95, abs(sin(2.1 + uv.x * (resolution.x * 3.14159265))));
		b = mix(b, b * b_b, grille_opacity);
		
	}
	
	// Apply the grille to the texture's color channels and apply Brightness. Since the grille and the scanlines (below) make the image very dark you
	// can compensate by increasing the brightness.
	text.r = clamp(r * brightness, 0.0, 1.0);
	text.g = clamp(g * brightness, 0.0, 1.0);
	text.b = clamp(b * brightness, 0.0, 1.0);
	
	// Scanlines are the horizontal lines that make up the image on a CRT monitor. 
	// Here we are actual setting the black gap between each line, which I guess is not the right definition of the word, but you get the idea  
	float scanlines = 0.5;
	if (scanlines_opacity > 0.0)
	{
		// Same technique as above, create lines with sine and applying it to the texture. Smoothstep to allow setting the line size.
		scanlines = smoothstep(scanlines_width, scanlines_width + 0.5, abs(sin(uv.y * (resolution.y * 3.14159265))));
		text.rgb = mix(text.rgb, text.rgb * vec3(scanlines), scanlines_opacity);
	}
	
	// Apply the banded noise.
	if (noise_opacity > 0.0)
	{
		// Generate a noise pattern that is very stretched horizontally, and animate it with noise_speed
		float noise = smoothstep(0.4, 0.5, noise(uv * vec2(2.0, 200.0) + vec2(10.0, (TIME * (noise_speed))) ) );
		
		// We use roll_line (set above) to define how big the noise should be vertically (multiplying cuts off all black parts).
		// We also add in some basic noise with random() to break up the noise pattern above. The noise is sized according to 
		// the resolution value set in the inspector. If you don't like this look you can 
		// change \"ceil(uv * resolution) / resolution\" to only \"uv\" to make it less pixelated. Or multiply resolution with som value
		// greater than 1.0 to make them smaller.
		roll_line *= noise * scanlines * clamp(random((ceil(uv * resolution) / resolution) + vec2(TIME * 0.8, 0.0)).x + 0.8, 0.0, 1.0);
		// Add it to the texture based on noise_opacity
		text.rgb = clamp(mix(text.rgb, text.rgb + roll_line, noise_opacity), vec3(0.0), vec3(1.0));
	}
	
	// Apply static noise by generating it over the whole screen in the same way as above
	if (static_noise_intensity > 0.0)
	{
		text.rgb += clamp(random((ceil(uv * resolution) / resolution) + fract(TIME)).x, 0.0, 1.0) * static_noise_intensity;
	}
	
	// Apply a black border to hide imperfections caused by the warping.
	// Also apply the vignette
	text.rgb *= border(uv);
	text.rgb *= vignette(uv);
	// Hides the black border and make that area transparent. Good if you want to add the the texture on top an image of a TV or monitor.
	if (clip_warp)
	{
		text.a = border(uv);
	}
	
	// Apply discoloration to get a VHS look (lower saturation and higher contrast)
	// You can play with the values below or expose them in the Inspector.
	float saturation = 0.5;
	float contrast = 1.2;
	if (discolor)
	{
		// Saturation
		vec3 greyscale = vec3(text.r + text.g + text.b) / 3.;
		text.rgb = mix(text.rgb, greyscale, saturation);
		
		// Contrast
		float midpoint = pow(0.5, 2.2);
		text.rgb = (text.rgb - vec3(midpoint)) * contrast + midpoint;
	}
	
	COLOR = text;
}"

[sub_resource type="ShaderMaterial" id=3]
shader = SubResource( 2 )
shader_param/overlay = true
shader_param/scanlines_opacity = 0.16
shader_param/scanlines_width = 0.454
shader_param/grille_opacity = 0.195
shader_param/resolution = Vector2( 640, 480 )
shader_param/pixelate = false
shader_param/roll = false
shader_param/roll_speed = 8.0
shader_param/roll_size = 15.0
shader_param/roll_variation = 3.353
shader_param/distort_intensity = 0.028
shader_param/noise_opacity = 0.061
shader_param/noise_speed = 5.0
shader_param/static_noise_intensity = 0.06
shader_param/aberration = 0.01
shader_param/brightness = 1.4
shader_param/discolor = false
shader_param/warp_amount = 0.027
shader_param/clip_warp = true
shader_param/vignette_intensity = 0.4
shader_param/vignette_opacity = 0.088

[node name="Game" type="Node2D"]
script = ExtResource( 1 )
billboard = ExtResource( 8 )

[node name="Background" type="Node2D" parent="."]
z_index = -1
script = ExtResource( 7 )

[node name="Sky" type="Sprite" parent="Background"]
position = Vector2( 511, 95 )
scale = Vector2( 4.05591, 3.59306 )
texture = ExtResource( 2 )

[node name="Moon" type="Sprite" parent="Background"]
modulate = Color( 1.5, 1.5, 1.5, 1 )
position = Vector2( 551, 260 )
scale = Vector2( 2.96864, 2.62986 )
texture = ExtResource( 11 )

[node name="HillsBack" type="Sprite" parent="Background"]
position = Vector2( 511, 243 )
scale = Vector2( 2.01667, 2.01667 )
texture = ExtResource( 10 )
region_enabled = true
region_rect = Rect2( 0, 0, 2532.61, 174.008 )

[node name="Hills" type="Sprite" parent="Background"]
position = Vector2( 711, 521 )
scale = Vector2( 2.01667, 2.01667 )
texture = ExtResource( 3 )
region_enabled = true
region_rect = Rect2( -742.74, 81, 2135.74, 283.429 )

[node name="Sea" type="Sprite" parent="Background"]
position = Vector2( 512, 418 )
scale = Vector2( 1.99414, 1.4587 )
texture = ExtResource( 18 )
offset = Vector2( 0, 169.329 )

[node name="Player" type="Sprite" parent="."]
visible = false
position = Vector2( 461, 740 )
scale = Vector2( 2.99387, 3.44625 )
texture = ExtResource( 5 )
offset = Vector2( 15.6168, -13.1597 )
script = ExtResource( 6 )

[node name="HUD" type="CanvasLayer" parent="."]
unique_name_in_owner = true
script = ExtResource( 14 )

[node name="kilometers_counter" parent="HUD" instance=ExtResource( 21 )]
unique_name_in_owner = true
anchor_top = 1.0
anchor_right = 0.0
margin_left = 14.0
margin_top = -98.0
margin_right = 1024.0
size_flags_horizontal = 9

[node name="MarginContainer" type="MarginContainer" parent="HUD"]
anchor_right = 1.0
anchor_bottom = 1.0
margin_left = 10.0
margin_top = 10.0
margin_right = -10.0
margin_bottom = -10.0

[node name="VBoxContainer" type="VBoxContainer" parent="HUD/MarginContainer"]
margin_right = 1004.0
margin_bottom = 748.0
size_flags_horizontal = 3
size_flags_vertical = 3
custom_constants/separation = -22

[node name="HBoxContainer" type="HBoxContainer" parent="HUD/MarginContainer/VBoxContainer"]
margin_right = 1004.0
margin_bottom = 264.0
size_flags_horizontal = 3
size_flags_vertical = 3

[node name="Padding" type="RichTextLabel" parent="HUD/MarginContainer/VBoxContainer/HBoxContainer"]
unique_name_in_owner = true
margin_right = 427.0
margin_bottom = 264.0
size_flags_horizontal = 3
size_flags_vertical = 3
custom_colors/font_color_shadow = Color( 0, 0, 0, 1 )
custom_constants/shadow_offset_x = 7
custom_constants/shadow_offset_y = 9
custom_fonts/mono_font = ExtResource( 12 )
custom_fonts/normal_font = ExtResource( 12 )

[node name="timer_counter" parent="HUD/MarginContainer/VBoxContainer/HBoxContainer" instance=ExtResource( 19 )]
unique_name_in_owner = true
anchor_right = 0.0
anchor_bottom = 0.0
margin_left = 431.0
margin_right = 572.0
margin_bottom = 264.0

[node name="LapLabel" type="RichTextLabel" parent="HUD/MarginContainer/VBoxContainer/HBoxContainer"]
unique_name_in_owner = true
margin_left = 576.0
margin_right = 1004.0
margin_bottom = 264.0
grow_horizontal = 0
size_flags_horizontal = 3
custom_constants/shadow_offset_x = 7
custom_constants/shadow_offset_y = 9
custom_fonts/normal_font = ExtResource( 13 )
bbcode_enabled = true
bbcode_text = "[right]lap:[/right]"
text = "lap:"

[node name="MiddlePanel" type="Panel" parent="HUD/MarginContainer/VBoxContainer"]
unique_name_in_owner = true
self_modulate = Color( 1, 1, 1, 0 )
margin_top = 242.0
margin_right = 1004.0
margin_bottom = 506.0
size_flags_vertical = 3

[node name="StartLabel" type="RichTextLabel" parent="HUD/MarginContainer/VBoxContainer/MiddlePanel"]
unique_name_in_owner = true
anchor_top = 0.5
anchor_right = 1.0
anchor_bottom = 0.5
grow_vertical = 2
size_flags_horizontal = 3
size_flags_vertical = 5
custom_colors/font_color_shadow = Color( 0, 0, 0, 1 )
custom_constants/shadow_offset_x = 7
custom_constants/shadow_offset_y = 9
custom_fonts/mono_font = ExtResource( 12 )
custom_fonts/normal_font = ExtResource( 12 )
bbcode_enabled = true
fit_content_height = true

[node name="Panel2" type="Panel" parent="HUD/MarginContainer/VBoxContainer"]
self_modulate = Color( 1, 1, 1, 0 )
margin_top = 484.0
margin_right = 1004.0
margin_bottom = 748.0
size_flags_vertical = 3

[node name="SpeedLabel" type="Label" parent="HUD/MarginContainer/VBoxContainer/Panel2"]
unique_name_in_owner = true
anchor_top = 1.0
anchor_bottom = 1.0
margin_top = -14.0
margin_right = 40.0
grow_vertical = 0
size_flags_horizontal = 3
size_flags_vertical = 6
custom_fonts/font = ExtResource( 13 )

[node name="WinScreen" parent="HUD/MarginContainer" instance=ExtResource( 20 )]
unique_name_in_owner = true
visible = false
anchor_right = 0.0
anchor_bottom = 0.0
margin_right = 1004.0
margin_bottom = 748.0

[node name="GameOverScreen" parent="HUD/MarginContainer" instance=ExtResource( 4 )]
unique_name_in_owner = true
visible = false
anchor_right = 0.0
anchor_bottom = 0.0
margin_right = 1004.0
margin_bottom = 748.0

[node name="PauseScene" parent="HUD" instance=ExtResource( 22 )]
unique_name_in_owner = true
visible = false

[node name="TextureManager" type="Node" parent="."]
script = ExtResource( 9 )

[node name="WorldEnvironment" type="WorldEnvironment" parent="."]
environment = SubResource( 1 )

[node name="StartTimer" type="Timer" parent="."]
wait_time = 3.0

[node name="Road" type="Node" parent="."]
unique_name_in_owner = true
script = ExtResource( 15 )

[node name="CheckpointTimer" type="Timer" parent="."]

[node name="CarEngine" type="AudioStreamPlayer" parent="."]
stream = ExtResource( 16 )
volume_db = -10.0
bus = "SFX"

[node name="DriftSound" type="AudioStreamPlayer" parent="."]
stream = ExtResource( 17 )
volume_db = -15.971
bus = "SFX"

[node name="three" type="AudioStreamPlayer" parent="."]
stream = ExtResource( 26 )
volume_db = -5.0
bus = "SFX"

[node name="two" type="AudioStreamPlayer" parent="."]
stream = ExtResource( 25 )
volume_db = -5.0
bus = "SFX"

[node name="one" type="AudioStreamPlayer" parent="."]
stream = ExtResource( 23 )
volume_db = -5.0
bus = "SFX"

[node name="go" type="AudioStreamPlayer" parent="."]
stream = ExtResource( 24 )
volume_db = -5.0
bus = "SFX"

[node name="CRT" type="ColorRect" parent="."]
unique_name_in_owner = true
material = SubResource( 3 )
anchor_right = 1.0
anchor_bottom = 1.0
margin_left = -62.0
margin_right = 1062.0
margin_bottom = 793.0
size_flags_horizontal = 15
size_flags_vertical = 15

[connection signal="go_back" from="HUD/MarginContainer/WinScreen" to="." method="_on_WinScreen_go_back"]
[connection signal="go_back" from="HUD/MarginContainer/GameOverScreen" to="." method="_on_GameOverScreen_go_back"]
[connection signal="exit_to_menu" from="HUD/PauseScene" to="." method="_on_PauseScene_exit_to_menu"]
[connection signal="timeout" from="StartTimer" to="." method="_on_StartTimer_timeout"]
[connection signal="timeout" from="CheckpointTimer" to="." method="_on_CheckpointTimer_timeout"]
